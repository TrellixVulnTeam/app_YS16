1.Text-Transform Values
      text-transform: uppercase;
      text-transform: lowercase;
      text-transform: capitalize; 

2.align-content: center;
    align-items: center;
    align-self: center;

    all: initial;
    //Change all the properties applied to the element or the element's parent to their initial value:

3.  animation: mymove 5s infinite;
    animation-delay: 2s;
    animation-direction: alternate;
    animation-duration: 3s;
    animation-fill-mode: forwards;
    animation-iteration-count: 2;
    animation-name: mymove;
    animation-play-state: paused;
    animation-timing-function: linear;


4.  background: lightblue url("img_tree.gif") no-repeat fixed center; 
    background-clip: padding-box;
    body {background-color: coral;}
    background-image: url("paper.gif");
    background-repeat: no-repeat;
    background-origin: content-box;
    background-attachment: fixed;
    background-position: center;
    background-repeat: repeat-y;
    background-size: auto;


5.  border: 5px solid red;
    border-bottom: 5px solid red;
    div {border-bottom-color: coral;}
    border-bottom-left-radius: 25px;
    div {border-bottom-style: dotted;}
    div {border-bottom-width: thin;}
    border-collapse: collapse;
    border-collapse: separate;
    border-image: url(border.png) 30 round;
    border-image-source: url(border.png);
    border-image-outset: 10px;
    border-image-slice: 30;
    border-radius: 25px;
    border-spacing: 10px 50px;
    div {border-style: dotted;}
    border-top: 5px solid red;
    div {border-top-color: coral;}
    border-top-left-radius: 25px;
    div {border-top-style: dotted;}
    div {border-top-width: thin;}
    div {border-width: thin;}
    box-shadow: 10px 10px 5px #888888;
    box-sizing: border-box;


6.  caption-side: bottom;
    caret-color: red;                //Specify the color of the caret in an input element:


7.  clip: rect(0px,60px,200px,0px);
    column-count: 3;                    //Divide the text in the <div> element into three columns:
    column-fill: auto;                  //Specify how to fill columns:
    column-gap: 40px;
    column-rule: 4px outset #ff00ff;    //Specify the width, style and color of the rule between columns:
    column-rule-color: #ff0000;
    column-rule-style: dotted;
    column-rule-width: 1px;
    column-span: all;                   //Let the <h2> element span across all columns:
    column-width: 100px;                //Specify a suggested, optimal width for the columns:
    content: " (" attr(href) ")";       //inserts the URL in parenthesis after each link:
    counter-reset: section;


8.  cursor: wait;
    cursor: help;
    cursor: crosshair;

    direction: rtl;
    display: inline;
    empty-cells: hide;
    filter: grayscale(100%);

9.  flex: 1;        //all the flexible items be the same length, regardless of its content:

    div:nth-of-type(2) {
       flex-basis: 80px;
    }
    //Set the initial length of the second flex-item to 80 pixels:

    display: flex;
        flex-direction: row-reverse; 

    display: flex;
    flex-flow: row-reverse wrap;


10. div:nth-of-type(1) {flex-grow: 1;}
    div:nth-of-type(2) {flex-grow: 3;}              //second flex-item grow three times wider than the rest:

    div:nth-of-type(2) {
        flex-shrink: 3;
    }

    float: right;
    font: 15px arial, sans-serif;

    p {font-family: "Times New Roman", Georgia, Serif;}
        font-kerning: normal;
        font-size: 250%;
        font-size-adjust: 0.58;
        font-stretch: expanded;
        font-variant: small-caps;
        font-weight: bold;

11. display: grid;
    grid: 150px / auto auto auto;
    grid-area: 2 / 1 / span 2 / span 3;
    display: grid;
    grid-auto-columns: 50px;
    display: grid;
    grid-auto-flow: column;
    display: grid;
    grid-auto-rows: 150px;
    grid-column: 1 / span 2;            //Make "item1" start on column 1 and span 2 columns:
    grid-column-end: span 3;            //Make "item1" span 3 columns:
    grid-column-gap: 50px;
    grid-column-start: 2;
    grid-gap: 50px;
    grid-row: 1 / span 2;
    grid-row-end: span 3;
    grid-row-gap: 50px;
    grid-row-start: 2;
    display: grid;
    grid-template: 150px / auto auto auto;

    hanging-punctuation: first;
        //Place a punctuation mark (if any) outside the start edge of the first line in the <p> element:

12.justify-content: space-around;          //Make some space around the items of the flexible <div> element:

    @keyframes mymove {
        from {top: 0px;}
        to {top: 200px;}
    }
    //Make an element move gradually 200px down:

13.letter-spacing: 2px;
    line-height: 90%;
    list-style: square url("sqpurple.gif");
    list-style-image: url('sqpurple.gif');
    list-style-position: inside;


14.ul.circle {list-style-type: circle;}
    ul.square {list-style-type: square;}
    ol.upper-roman {list-style-type: upper-roman;}
    ol.lower-alpha {list-style-type: lower-alpha;}

    margin: 2cm 4cm 3cm 4cm;
    margin-bottom: 2cm;
    max-height: 50px;


    @media screen and (min-width: 480px) {
            body {background-color: lightgreen;}
        }
    //Change the background-color if the viewport is 480 pixels wide or wider


15.min-height: 100px;
    object-fit: cover;
    opacity: 0.5;
    div#myRedDIV {order: 2;}
    outline: #00FF00 dotted thick;
    outline-style: dotted;
    outline-color: #00ff00;
    outline-offset: 15px;

16.overflow: scroll;
overflow-x: hidden;
padding: 2cm 4cm 3cm 4cm;
padding-bottom: 2cm;


17.@media print {
        h1 {page-break-before: always;}
    }
//Always insert a page break before each <h1> element (when printing):

    perspective: 500px;                    //Set the perspective from where an element is viewed:
    perspective: 150px;
    perspective-origin: 10% 10%;            //Set a 3D element's base placement:
    position: absolute;

    quotes: "\00ab" "\00bb";                    //Specify the quotation marks for quotations:


18.resize: both;
    overflow: auto;
    pre {tab-size: 16;}
    table-layout: fixed;
    text-align-last: right;
    vertical-align: text-top;
    visibility: hidden;
    white-space: nowrap;                                //Specify that the text in <p> elements will never wrap:
    word-break: break-all;                              //Break words between any two letters:
    word-wrap: break-word;                     //Allow long words to be able to break and wrap onto the next line:


19.font-family: 'Ropa Sans', sans-serif;
    font-size: 14px;
    color: green;
    line-height: 4.3em;

    text-shadow: 20px 20px 10px #6AAFCF;
    box-shadow: 15px 15px 5px #888245;


    position:relative;
    .gradient{background-image: linear-gradient(180deg, #FFF 0%, #000 100%);}
    resize:horizontal;
    overflow:auto;


20.Descendant combinator (E F)  => You should definitely be familiar with this one.
    The descendant selector targets any element F
    that is a descendant (child, grandchild, great
    grandchild, and so on) of an element E. For example,
    ol li targets li elements that are inside
    ordered lists. This would include li elements in
    a ul thats nested in an ol, which might not be
    what you want.

21.Child combinator (E > F)    =>This selector matches any element F that is a direct
    child of element any further nested elements
    will be ignored. Continuing the example,
    ol > li would only target li elements directly
    inside the ol, and would omit those nested inside
    a ul.
    Adjacent sibling, or next sibling
    selector (E + F)   =>
    This will match any element F that shares the
    same parent as E, and comes directly after E in the
    markup. For example, li + li will target all li
    elements except the first li in a given container.
    General sibling or following
    sibling selector (E ~ F)  =>
    This ones a little trickier. It will match any element
    F that shares the same parent as any E and
    comes after it in the markup. So, h1 ~ h2 will
    match any h2 that follows an h1, as long as they match any h2 that follows an h1, as long as they
    both share the same direct parentï¿½that is, as long
    as the h2 is not nested in any other element.


